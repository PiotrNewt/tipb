// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lab.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NextApplyIdxRequest struct {
	SqlFingerPrint string `protobuf:"bytes,1,opt,name=sqlFingerPrint,proto3" json:"sqlFingerPrint,omitempty"`
	Sql            string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Reward         int64  `protobuf:"varint,3,opt,name=reward,proto3" json:"reward,omitempty"`
	IsFinished     bool   `protobuf:"varint,4,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	Plan           string `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
	Flag           string `protobuf:"bytes,6,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *NextApplyIdxRequest) Reset()                    { *m = NextApplyIdxRequest{} }
func (m *NextApplyIdxRequest) String() string            { return proto.CompactTextString(m) }
func (*NextApplyIdxRequest) ProtoMessage()               {}
func (*NextApplyIdxRequest) Descriptor() ([]byte, []int) { return fileDescriptorLab, []int{0} }

func (m *NextApplyIdxRequest) GetSqlFingerPrint() string {
	if m != nil {
		return m.SqlFingerPrint
	}
	return ""
}

func (m *NextApplyIdxRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *NextApplyIdxRequest) GetReward() int64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *NextApplyIdxRequest) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (m *NextApplyIdxRequest) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

func (m *NextApplyIdxRequest) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

type NextApplyIdxResponse struct {
	SqlFingerPrint string `protobuf:"bytes,1,opt,name=sqlFingerPrint,proto3" json:"sqlFingerPrint,omitempty"`
	Sql            string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	RuleIdx        int64  `protobuf:"varint,3,opt,name=ruleIdx,proto3" json:"ruleIdx,omitempty"`
}

func (m *NextApplyIdxResponse) Reset()                    { *m = NextApplyIdxResponse{} }
func (m *NextApplyIdxResponse) String() string            { return proto.CompactTextString(m) }
func (*NextApplyIdxResponse) ProtoMessage()               {}
func (*NextApplyIdxResponse) Descriptor() ([]byte, []int) { return fileDescriptorLab, []int{1} }

func (m *NextApplyIdxResponse) GetSqlFingerPrint() string {
	if m != nil {
		return m.SqlFingerPrint
	}
	return ""
}

func (m *NextApplyIdxResponse) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *NextApplyIdxResponse) GetRuleIdx() int64 {
	if m != nil {
		return m.RuleIdx
	}
	return 0
}

func init() {
	proto.RegisterType((*NextApplyIdxRequest)(nil), "tipb.NextApplyIdxRequest")
	proto.RegisterType((*NextApplyIdxResponse)(nil), "tipb.NextApplyIdxResponse")
}
func (m *NextApplyIdxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextApplyIdxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SqlFingerPrint) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.SqlFingerPrint)))
		i += copy(dAtA[i:], m.SqlFingerPrint)
	}
	if len(m.Sql) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.Sql)))
		i += copy(dAtA[i:], m.Sql)
	}
	if m.Reward != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLab(dAtA, i, uint64(m.Reward))
	}
	if m.IsFinished {
		dAtA[i] = 0x20
		i++
		if m.IsFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Plan) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.Plan)))
		i += copy(dAtA[i:], m.Plan)
	}
	if len(m.Flag) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.Flag)))
		i += copy(dAtA[i:], m.Flag)
	}
	return i, nil
}

func (m *NextApplyIdxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextApplyIdxResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SqlFingerPrint) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.SqlFingerPrint)))
		i += copy(dAtA[i:], m.SqlFingerPrint)
	}
	if len(m.Sql) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLab(dAtA, i, uint64(len(m.Sql)))
		i += copy(dAtA[i:], m.Sql)
	}
	if m.RuleIdx != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLab(dAtA, i, uint64(m.RuleIdx))
	}
	return i, nil
}

func encodeVarintLab(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NextApplyIdxRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SqlFingerPrint)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	if m.Reward != 0 {
		n += 1 + sovLab(uint64(m.Reward))
	}
	if m.IsFinished {
		n += 2
	}
	l = len(m.Plan)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	return n
}

func (m *NextApplyIdxResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.SqlFingerPrint)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovLab(uint64(l))
	}
	if m.RuleIdx != 0 {
		n += 1 + sovLab(uint64(m.RuleIdx))
	}
	return n
}

func sovLab(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLab(x uint64) (n int) {
	return sovLab(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NextApplyIdxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextApplyIdxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextApplyIdxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlFingerPrint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SqlFingerPrint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			m.Reward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reward |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinished = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextApplyIdxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextApplyIdxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextApplyIdxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlFingerPrint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SqlFingerPrint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLab
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIdx", wireType)
			}
			m.RuleIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleIdx |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLab(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLab
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLab
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLab
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLab(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLab = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLab   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lab.proto", fileDescriptorLab) }

var fileDescriptorLab = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x41, 0x4a, 0xc4, 0x30,
	0x14, 0x86, 0x27, 0xb6, 0x56, 0xe7, 0x2d, 0x64, 0x88, 0x3a, 0xc4, 0x59, 0x94, 0xd2, 0x85, 0x74,
	0xd5, 0x85, 0x9e, 0x60, 0x5c, 0x0c, 0x0c, 0x88, 0x68, 0x6f, 0xd0, 0xda, 0x67, 0xcd, 0x10, 0x9a,
	0x34, 0x49, 0xb1, 0xde, 0xc4, 0x5b, 0x78, 0x0d, 0x97, 0x1e, 0x41, 0xea, 0x45, 0xa4, 0x99, 0x11,
	0x54, 0xba, 0x73, 0xf7, 0xbf, 0xef, 0x87, 0xe4, 0xe3, 0x3d, 0x98, 0x8a, 0xbc, 0x48, 0x95, 0x96,
	0x56, 0x52, 0xdf, 0x72, 0x55, 0xc4, 0xaf, 0x04, 0x8e, 0x6f, 0xb0, 0xb3, 0x4b, 0xa5, 0xc4, 0xf3,
	0xba, 0xec, 0x32, 0x6c, 0x5a, 0x34, 0x96, 0x9e, 0xc3, 0x91, 0x69, 0xc4, 0x8a, 0xd7, 0x15, 0xea,
	0x5b, 0xcd, 0x6b, 0xcb, 0x48, 0x44, 0x92, 0x69, 0xf6, 0x87, 0xd2, 0x19, 0x78, 0xa6, 0x11, 0x6c,
	0xcf, 0x95, 0x43, 0xa4, 0x73, 0x08, 0x34, 0x3e, 0xe5, 0xba, 0x64, 0x5e, 0x44, 0x12, 0x2f, 0xdb,
	0x4d, 0x34, 0x04, 0xe0, 0x66, 0xc5, 0x6b, 0x6e, 0x1e, 0xb1, 0x64, 0x7e, 0x44, 0x92, 0xc3, 0xec,
	0x07, 0xa1, 0x14, 0x7c, 0x25, 0xf2, 0x9a, 0xed, 0xbb, 0xa7, 0x5c, 0x1e, 0xd8, 0x83, 0xc8, 0x2b,
	0x16, 0x6c, 0xd9, 0x90, 0xe3, 0x0d, 0x9c, 0xfc, 0x16, 0x36, 0x4a, 0xd6, 0x06, 0xff, 0x61, 0xcc,
	0xe0, 0x40, 0xb7, 0x02, 0xd7, 0x65, 0xb7, 0x53, 0xfe, 0x1e, 0x2f, 0x36, 0x70, 0xba, 0x6c, 0xad,
	0xbc, 0x96, 0x15, 0xbf, 0xcf, 0x45, 0xd6, 0x0a, 0x34, 0xee, 0x5f, 0x7a, 0x07, 0xf3, 0x0a, 0xed,
	0xd8, 0xe2, 0xce, 0xd2, 0x61, 0xaf, 0xe9, 0x48, 0xb5, 0x58, 0x8c, 0x55, 0x5b, 0xfb, 0x78, 0x72,
	0x35, 0x7b, 0xeb, 0x43, 0xf2, 0xde, 0x87, 0xe4, 0xa3, 0x0f, 0xc9, 0xcb, 0x67, 0x38, 0x29, 0x02,
	0x77, 0xa8, 0xcb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x1a, 0x54, 0x8c, 0xb5, 0x01, 0x00,
	0x00,
}
